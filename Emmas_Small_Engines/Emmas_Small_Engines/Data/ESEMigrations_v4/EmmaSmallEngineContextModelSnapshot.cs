// <auto-generated />
using System;
using Emmas_Small_Engines.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Emmas_Small_Engines.Data.ESEMigrations_v4
{
    [DbContext(typeof(EmmaSmallEngineContext))]
    partial class EmmaSmallEngineContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.15");

            modelBuilder.Entity("Emmas_Small_Engines.Models.COGSReport", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("COGS")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<double>("GrossProfit")
                        .HasColumnType("REAL");

                    b.Property<string>("InventoryID")
                        .HasColumnType("TEXT");

                    b.Property<int>("InvoiceID")
                        .HasColumnType("INTEGER");

                    b.Property<double>("MaterialPeriodEnd")
                        .HasColumnType("REAL");

                    b.Property<double>("MaterialPeriodPurchase")
                        .HasColumnType("REAL");

                    b.Property<double>("MaterialPeriodStart")
                        .HasColumnType("REAL");

                    b.Property<double>("ProfitMargin")
                        .HasColumnType("REAL");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("BLOB");

                    b.Property<double>("SaleRevenuePeriod")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("cogName")
                        .HasColumnType("TEXT");

                    b.Property<string>("crepCriteria")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("InventoryID");

                    b.HasIndex("InvoiceID");

                    b.ToTable("COGSReports");
                });

            modelBuilder.Entity("Emmas_Small_Engines.Models.Customer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("Postal")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("TEXT");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("Phone")
                        .IsUnique();

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Emmas_Small_Engines.Models.EmpLogin", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EmployeeID")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("HourlyReportID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("SignIn")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("SignOut")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("WorkDate")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("HourlyReportID");

                    b.ToTable("EmpLogins");
                });

            modelBuilder.Entity("Emmas_Small_Engines.Models.Employee", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Emmas_Small_Engines.Models.EmployeePosition", b =>
                {
                    b.Property<int>("EmployeeID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.HasKey("EmployeeID", "Title");

                    b.HasIndex("Title");

                    b.ToTable("EmployeePositions");
                });

            modelBuilder.Entity("Emmas_Small_Engines.Models.HourlyReport", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("BLOB");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("TEXT");

                    b.Property<double>("hour")
                        .HasColumnType("REAL");

                    b.Property<string>("hourName")
                        .HasColumnType("TEXT");

                    b.Property<string>("hrepCriteria")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("HourlyReports");
                });

            modelBuilder.Entity("Emmas_Small_Engines.Models.Inventory", b =>
                {
                    b.Property<string>("UPC")
                        .HasMaxLength(8)
                        .HasColumnType("TEXT");

                    b.Property<double>("AdjustPrice")
                        .HasColumnType("REAL");

                    b.Property<bool>("Current")
                        .HasColumnType("INTEGER");

                    b.Property<double>("MarkupPrice")
                        .HasColumnType("REAL");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Quantity")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("Stock")
                        .HasColumnType("INTEGER");

                    b.HasKey("UPC");

                    b.ToTable("Inventories");
                });

            modelBuilder.Entity("Emmas_Small_Engines.Models.Invoice", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Appreciation")
                        .HasColumnType("REAL");

                    b.Property<int>("CustomerID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<int>("EmployeeID")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Subtotal")
                        .HasColumnType("REAL");

                    b.HasKey("ID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("EmployeeID");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("Emmas_Small_Engines.Models.InvoiceLine", b =>
                {
                    b.Property<string>("InventoryID")
                        .HasColumnType("TEXT");

                    b.Property<int>("InvoiceID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<double>("SalePrice")
                        .HasColumnType("REAL");

                    b.HasKey("InventoryID", "InvoiceID");

                    b.HasIndex("InvoiceID");

                    b.ToTable("InvoiceLines");
                });

            modelBuilder.Entity("Emmas_Small_Engines.Models.InvoicePayment", b =>
                {
                    b.Property<int>("PaymentID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("InvoiceID")
                        .HasColumnType("INTEGER");

                    b.HasKey("PaymentID", "InvoiceID");

                    b.HasIndex("InvoiceID");

                    b.ToTable("InvoicePayments");
                });

            modelBuilder.Entity("Emmas_Small_Engines.Models.OrderRequest", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CustomerID")
                        .IsRequired()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("ExternalOrderNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ReceiveDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("SentDate")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("CustomerID");

                    b.ToTable("OrderRequests");
                });

            modelBuilder.Entity("Emmas_Small_Engines.Models.OrderRequest_Inventory", b =>
                {
                    b.Property<int>("OrderRequestID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("InventoryID")
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderAmount")
                        .HasColumnType("INTEGER");

                    b.HasKey("OrderRequestID", "InventoryID");

                    b.HasIndex("InventoryID");

                    b.ToTable("OrderRequest_Inventories");
                });

            modelBuilder.Entity("Emmas_Small_Engines.Models.Payment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Emmas_Small_Engines.Models.Position", b =>
                {
                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.HasKey("Title");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("Emmas_Small_Engines.Models.Price", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Cost")
                        .HasColumnType("REAL");

                    b.Property<int>("Count")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("InventoryID")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("SupplierID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("InventoryID");

                    b.HasIndex("SupplierID");

                    b.ToTable("Prices");
                });

            modelBuilder.Entity("Emmas_Small_Engines.Models.ReportData", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("TEXT");

                    b.Property<string>("repCriteria")
                        .HasColumnType("TEXT");

                    b.Property<string>("repName")
                        .HasColumnType("TEXT");

                    b.Property<string>("repType")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("ReportDatas");
                });

            modelBuilder.Entity("Emmas_Small_Engines.Models.SalesReport", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("AppreciationTotal")
                        .HasColumnType("REAL");

                    b.Property<double>("Cash")
                        .HasColumnType("REAL");

                    b.Property<double>("Cheque")
                        .HasColumnType("REAL");

                    b.Property<double>("Credit")
                        .HasColumnType("REAL");

                    b.Property<double>("Debit")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<double>("OtherTax")
                        .HasColumnType("REAL");

                    b.Property<double>("SaleTax")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("TEXT");

                    b.Property<double>("TotalTax")
                        .HasColumnType("REAL");

                    b.Property<double>("paymentTotal")
                        .HasColumnType("REAL");

                    b.Property<string>("srepCriteria")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("srepName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("SalesReports");
                });

            modelBuilder.Entity("Emmas_Small_Engines.Models.SalesReportEmp", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EmpName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("EmpSales")
                        .HasColumnType("REAL");

                    b.Property<int>("SaleReportsID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("SaleReportsID");

                    b.ToTable("SalesReportEmps");
                });

            modelBuilder.Entity("Emmas_Small_Engines.Models.SalesReportItem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ItemQuantity")
                        .HasColumnType("INTEGER");

                    b.Property<double>("ItemTotal")
                        .HasColumnType("REAL");

                    b.Property<int>("SalesReportID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("SalesReportID");

                    b.ToTable("SalesReportItems");
                });

            modelBuilder.Entity("Emmas_Small_Engines.Models.Supplier", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("Postal")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("TEXT");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Phone")
                        .IsUnique();

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("Emmas_Small_Engines.Models.COGSReport", b =>
                {
                    b.HasOne("Emmas_Small_Engines.Models.Inventory", "Inventory")
                        .WithMany("COGSReports")
                        .HasForeignKey("InventoryID");

                    b.HasOne("Emmas_Small_Engines.Models.Invoice", "Invoice")
                        .WithMany("COGSReports")
                        .HasForeignKey("InvoiceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inventory");

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("Emmas_Small_Engines.Models.EmpLogin", b =>
                {
                    b.HasOne("Emmas_Small_Engines.Models.Employee", "Employee")
                        .WithMany("EmpLogins")
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Emmas_Small_Engines.Models.HourlyReport", "HourlyReports")
                        .WithMany("EmpLogins")
                        .HasForeignKey("HourlyReportID");

                    b.Navigation("Employee");

                    b.Navigation("HourlyReports");
                });

            modelBuilder.Entity("Emmas_Small_Engines.Models.EmployeePosition", b =>
                {
                    b.HasOne("Emmas_Small_Engines.Models.Employee", "Employee")
                        .WithMany("EmployeePositions")
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Emmas_Small_Engines.Models.Position", "Position")
                        .WithMany("EmployeePositions")
                        .HasForeignKey("Title")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("Emmas_Small_Engines.Models.Invoice", b =>
                {
                    b.HasOne("Emmas_Small_Engines.Models.Customer", "Customer")
                        .WithMany("Invoices")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Emmas_Small_Engines.Models.Employee", "Employee")
                        .WithMany("Invoices")
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Emmas_Small_Engines.Models.InvoiceLine", b =>
                {
                    b.HasOne("Emmas_Small_Engines.Models.Inventory", "Inventory")
                        .WithMany("InvoiceLines")
                        .HasForeignKey("InventoryID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Emmas_Small_Engines.Models.Invoice", "Invoice")
                        .WithMany("InvoiceLines")
                        .HasForeignKey("InvoiceID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Inventory");

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("Emmas_Small_Engines.Models.InvoicePayment", b =>
                {
                    b.HasOne("Emmas_Small_Engines.Models.Invoice", "Invoice")
                        .WithMany("InvoicePayments")
                        .HasForeignKey("InvoiceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Emmas_Small_Engines.Models.Payment", "Payment")
                        .WithMany("InvoicePayments")
                        .HasForeignKey("PaymentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Invoice");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("Emmas_Small_Engines.Models.OrderRequest", b =>
                {
                    b.HasOne("Emmas_Small_Engines.Models.Customer", "Customer")
                        .WithMany("OrderRequests")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Emmas_Small_Engines.Models.OrderRequest_Inventory", b =>
                {
                    b.HasOne("Emmas_Small_Engines.Models.Inventory", "Inventory")
                        .WithMany("OrderRequest_Inventories")
                        .HasForeignKey("InventoryID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Emmas_Small_Engines.Models.OrderRequest", "OrderRequest")
                        .WithMany("OrderRequest_Inventories")
                        .HasForeignKey("OrderRequestID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inventory");

                    b.Navigation("OrderRequest");
                });

            modelBuilder.Entity("Emmas_Small_Engines.Models.Price", b =>
                {
                    b.HasOne("Emmas_Small_Engines.Models.Inventory", "Inventory")
                        .WithMany("Prices")
                        .HasForeignKey("InventoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Emmas_Small_Engines.Models.Supplier", "Supplier")
                        .WithMany("Prices")
                        .HasForeignKey("SupplierID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Inventory");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Emmas_Small_Engines.Models.SalesReportEmp", b =>
                {
                    b.HasOne("Emmas_Small_Engines.Models.SalesReport", "SaleReports")
                        .WithMany("SalesReportEmps")
                        .HasForeignKey("SaleReportsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SaleReports");
                });

            modelBuilder.Entity("Emmas_Small_Engines.Models.SalesReportItem", b =>
                {
                    b.HasOne("Emmas_Small_Engines.Models.SalesReport", "SalesReport")
                        .WithMany("SalesReportItems")
                        .HasForeignKey("SalesReportID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SalesReport");
                });

            modelBuilder.Entity("Emmas_Small_Engines.Models.Customer", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("OrderRequests");
                });

            modelBuilder.Entity("Emmas_Small_Engines.Models.Employee", b =>
                {
                    b.Navigation("EmpLogins");

                    b.Navigation("EmployeePositions");

                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("Emmas_Small_Engines.Models.HourlyReport", b =>
                {
                    b.Navigation("EmpLogins");
                });

            modelBuilder.Entity("Emmas_Small_Engines.Models.Inventory", b =>
                {
                    b.Navigation("COGSReports");

                    b.Navigation("InvoiceLines");

                    b.Navigation("OrderRequest_Inventories");

                    b.Navigation("Prices");
                });

            modelBuilder.Entity("Emmas_Small_Engines.Models.Invoice", b =>
                {
                    b.Navigation("COGSReports");

                    b.Navigation("InvoiceLines");

                    b.Navigation("InvoicePayments");
                });

            modelBuilder.Entity("Emmas_Small_Engines.Models.OrderRequest", b =>
                {
                    b.Navigation("OrderRequest_Inventories");
                });

            modelBuilder.Entity("Emmas_Small_Engines.Models.Payment", b =>
                {
                    b.Navigation("InvoicePayments");
                });

            modelBuilder.Entity("Emmas_Small_Engines.Models.Position", b =>
                {
                    b.Navigation("EmployeePositions");
                });

            modelBuilder.Entity("Emmas_Small_Engines.Models.SalesReport", b =>
                {
                    b.Navigation("SalesReportEmps");

                    b.Navigation("SalesReportItems");
                });

            modelBuilder.Entity("Emmas_Small_Engines.Models.Supplier", b =>
                {
                    b.Navigation("Prices");
                });
#pragma warning restore 612, 618
        }
    }
}
